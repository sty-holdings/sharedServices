package sharedServices

import (
	"testing"

	ctv "github.com/sty-holdings/sharedServices/v2025/constsTypesVars"
)

var (
	testUsername = "testuser@sty-holdings.com"
)

func TestGetIdentityCredentials(tPtr *testing.T) {

	type arguments struct {
		loginType          string
		password           *string
		shouldBeAuthorized bool
		username           string
	}

	var (
		environment = ctv.ENVIRONMENT_LOCAL
		errorInfo   errs.ErrorInfo
		gotError    bool
		identityId  string
		idToken     string
		password    = "Aa1234567!"
		awsSettings AWSSettings
	)

	tests := []struct {
		name      string
		arguments arguments
		wantError bool
	}{
		{
			name: ctv.TEST_POSITIVE_SUCCESS + "login with username/password",
			arguments: arguments{
				loginType:          ctv.AUTH_USER_PASSWORD_AUTH,
				password:           &password,
				shouldBeAuthorized: true,
				username:           testUsername,
			},
			wantError: false,
		},
		{
			name: ctv.TEST_POSITIVE_SUCCESS + "login with SRP",
			arguments: arguments{
				loginType:          ctv.AUTH_USER_SRP,
				password:           &password,
				shouldBeAuthorized: true,
				username:           testUsername,
			},
			wantError: false,
		},
	}

	for _, ts := range tests {
		tPtr.Run(
			ts.name, func(t *testing.T) {
				awsSettings, errorInfo = LoadAWSCustomerSettings(environment)
				_, idToken, _, errorInfo = Login(
					ts.arguments.loginType,
					ts.arguments.username,
					ts.arguments.password,
					awsSettings.STYHCognitoIdentityInfo,
					awsSettings.BaseConfig,
				)
				identityId, errorInfo = GetId(awsSettings.STYHCognitoIdentityInfo, awsSettings.BaseConfig, idToken, ctv.VAL_EMPTY, ctv.VAL_EMPTY)
				if _, errorInfo = GetIdentityCredentials(awsSettings.STYHCognitoIdentityInfo, awsSettings.BaseConfig, idToken, identityId); errorInfo.Error != nil {
					gotError = true
				} else {
					gotError = false
				}
				if gotError != ts.wantError {
					tPtr.Error(errorInfo.Error.Error())
				}
			},
		)
	}
}

func TestGetId(tPtr *testing.T) {

	type arguments struct {
		loginType          string
		password           *string
		shouldBeAuthorized bool
		username           string
	}

	var (
		environment = ctv.ENVIRONMENT_LOCAL
		errorInfo   errs.ErrorInfo
		gotError    bool
		idToken     string
		password    = "Aa1234567!"
		awsSettings AWSSettings
	)

	tests := []struct {
		name      string
		arguments arguments
		wantError bool
	}{
		{
			name: ctv.TEST_POSITIVE_SUCCESS + "login with username/password",
			arguments: arguments{
				loginType:          ctv.AUTH_USER_PASSWORD_AUTH,
				password:           &password,
				shouldBeAuthorized: true,
				username:           testUsername,
			},
			wantError: false,
		},
		{
			name: ctv.TEST_POSITIVE_SUCCESS + "login with SRP",
			arguments: arguments{
				loginType:          ctv.AUTH_USER_SRP,
				password:           &password,
				shouldBeAuthorized: true,
				username:           testUsername,
			},
			wantError: false,
		},
	}

	for _, ts := range tests {
		tPtr.Run(
			ts.name, func(t *testing.T) {
				awsSettings, errorInfo = LoadAWSCustomerSettings(environment)
				_, idToken, _, errorInfo = Login(
					ts.arguments.loginType,
					ts.arguments.username,
					ts.arguments.password,
					awsSettings.STYHCognitoIdentityInfo,
					awsSettings.BaseConfig,
				)
				if _, errorInfo = GetId(awsSettings.STYHCognitoIdentityInfo, awsSettings.BaseConfig, idToken, ctv.VAL_EMPTY, ctv.VAL_EMPTY); errorInfo.Error != nil {
					gotError = true
				} else {
					gotError = false
				}
				if gotError != ts.wantError {
					tPtr.Error(errorInfo.Error.Error())
				}
			},
		)
	}
}

// TestGetParameters - test the client facing function.
func TestGetParameters(tPtr *testing.T) {

	type arguments struct {
		loginType          string
		password           *string
		shouldBeAuthorized bool
		username           string
	}

	var (
		environment = ctv.ENVIRONMENT_LOCAL
		errorInfo   errs.ErrorInfo
		gotError    bool
		idToken     string
		password    = "Aa1234567!"
		awsSettings AWSSettings
	)

	tests := []struct {
		name      string
		arguments arguments
		wantError bool
	}{
		{
			name: ctv.TEST_POSITIVE_SUCCESS + "login with username/password",
			arguments: arguments{
				loginType:          ctv.AUTH_USER_PASSWORD_AUTH,
				password:           &password,
				shouldBeAuthorized: true,
				username:           testUsername,
			},
			wantError: false,
		},
		{
			name: ctv.TEST_POSITIVE_SUCCESS + "login with SRP",
			arguments: arguments{
				loginType:          ctv.AUTH_USER_SRP,
				password:           &password,
				shouldBeAuthorized: true,
				username:           testUsername,
			},
			wantError: false,
		},
	}

	for _, ts := range tests {
		tPtr.Run(
			ts.name, func(t *testing.T) {
				awsSettings, errorInfo = LoadAWSCustomerSettings(environment)
				_, idToken, _, errorInfo = Login(
					ts.arguments.loginType,
					ts.arguments.username,
					ts.arguments.password,
					awsSettings.STYHCognitoIdentityInfo,
					awsSettings.BaseConfig,
				)
				if _, errorInfo = GetParameters(awsSettings.STYHCognitoIdentityInfo, awsSettings.BaseConfig, idToken, "ai2c-local-nats-token"); errorInfo.Error != nil {
					gotError = true
				} else {
					gotError = false
				}
				if gotError != ts.wantError {
					tPtr.Error(errorInfo.Error.Error())
				}
			},
		)
	}
}

func TestLoadAccountInfo(tPtr *testing.T) {

	type arguments struct {
		configFilename string
	}

	var (
		errorInfo errs.ErrorInfo
		gotError  bool
	)

	tests := []struct {
		name      string
		arguments arguments
		wantError bool
	}{
		{
			name: ctv.TEST_POSITIVE_SUCCESS + "Config file exists",
			arguments: arguments{
				configFilename: "/Users/syacko/workspace/sty-holdings/GriesPikeThomp/servers/connect-server/config/local/AWS-account-info.json",
			},
			wantError: false,
		},
		{
			name: ctv.TEST_NEGATIVE_SUCCESS + "Config file does not exist",
			arguments: arguments{
				configFilename: ctv.VAL_EMPTY,
			},
			wantError: true,
		},
	}

	for _, ts := range tests {
		tPtr.Run(
			ts.name, func(t *testing.T) {
				if _, _, errorInfo = LoadServerAWSBaseConfig(ts.arguments.configFilename); errorInfo.Error != nil {
					gotError = true
				} else {
					gotError = false
				}
				if gotError != ts.wantError {
					tPtr.Error(errorInfo.Error.Error())
				}
			},
		)
	}
}

func TestLogin(tPtr *testing.T) {

	type arguments struct {
		loginType          string
		password           *string
		shouldBeAuthorized bool
		username           string
	}

	var (
		environment = ctv.ENVIRONMENT_LOCAL
		errorInfo   errs.ErrorInfo
		gotError    bool
		password    = "Aa1234567!"
		awsSettings AWSSettings
	)

	tests := []struct {
		name      string
		arguments arguments
		wantError bool
	}{
		{
			name: ctv.TEST_POSITIVE_SUCCESS + "login with username/password",
			arguments: arguments{
				loginType:          ctv.AUTH_USER_PASSWORD_AUTH,
				password:           &password,
				shouldBeAuthorized: true,
				username:           testUsername,
			},
			wantError: false,
		},
		{
			name: ctv.TEST_POSITIVE_SUCCESS + "login with SRP",
			arguments: arguments{
				loginType:          ctv.AUTH_USER_SRP,
				password:           &password,
				shouldBeAuthorized: true,
				username:           testUsername,
			},
			wantError: false,
		},
	}

	for _, ts := range tests {
		tPtr.Run(
			ts.name, func(t *testing.T) {
				awsSettings, errorInfo = LoadAWSCustomerSettings(environment)
				if _, _, _, errorInfo = Login(
					ts.arguments.loginType,
					ts.arguments.username,
					ts.arguments.password,
					awsSettings.STYHCognitoIdentityInfo,
					awsSettings.BaseConfig,
				); errorInfo.Error != nil {
					gotError = true
				} else {
					gotError = false
				}
				if gotError != ts.wantError {
					tPtr.Error(errorInfo.Error.Error())
				}
			},
		)
	}
}

// Part of run_AWS_No_Token_Test list
// func TestAWSHelper_ConfirmUser(tPtr *testing.T) {
//
// 	var (
// 		errorInfo         errs.ErrorInfo
// 		tAWSHelper        AWSHelper
// 		function, _, _, _ = runtime.Caller(0)
// 		tFunctionName     = runtime.FuncForPC(function).Name()
// 	)
//
// 	tAWSHelper, _ = NewAWSSession(ctv.TEST_AWS_INFORMATION_FQN)
//
// 	tPtr.Run(
// 		tFunctionName, func(tPtr *testing.T) {
// 			if errorInfo = tAWSHelper.ConfirmUser(ctv.TEST_USERNAME_SAVUP_TEST_DO_NOT_DELETE); errorInfo.Error != nil {
// 				tPtr.Errorf("%v Failed: Was expecting an err of %v but got %v.", tFunctionName, "nil", errorInfo.Error.Error())
// 			}
// 			if errorInfo = tAWSHelper.ConfirmUser(ctv.EMPTY); errorInfo.Error == nil {
// 				tPtr.Errorf("%v Failed: Was expecting an err of %v but got %v.", tFunctionName, errorInfo.Error.Error(), "nil")
// 			}
// 		},
// 	)
// }

// Requires updated access token. You can use Cognito > User pools > App integration > App clients and analytics > {app name} > Hosted UI > View Hosted UI
// to login. This will output an access and id token for the user.
// func TestAWSHelper_GetRequestorEmailPhoneFromIdTokenClaims(tPtr *testing.T) {
//
// 	var (
// 		errorInfo         errs.ErrorInfo
// 		myAWS             AWSHelper
// 		myFireBase        coreHelpers.FirebaseFirestoreHelper
// 		function, _, _, _ = runtime.Caller(0)
// 		tFunctionName     = runtime.FuncForPC(function).Name()
// 	)
//
// 	myAWS, myFireBase = StartTest()
//
// 	tPtr.Run(
// 		tFunctionName, func(tPtr *testing.T) {
// 			//  Positive Test - Successful
// 			if _, _, _, errorInfo = myAWS.GetRequestorEmailPhoneFromIdTokenClaims(
// 				myFireBase.FirestoreClientPtr,
// 				string(testingIdTokenValid),
// 			); errorInfo.Error != nil {
// 				tPtr.Errorf("%v Failed: Was expecting an err of %v but got %v.", tFunctionName, "nil", errorInfo.Error.Error())
// 			}
// 			if _, _, _, errorInfo = myAWS.GetRequestorEmailPhoneFromIdTokenClaims(
// 				myFireBase.FirestoreClientPtr,
// 				ctv.TEST_TOKEN_INVALID,
// 			); errorInfo.Error == nil {
// 				tPtr.Errorf("%v Failed: Was expecting an err of %v but got %v.", tFunctionName, errorInfo.Error.Error(), "nil")
// 			}
// 			if _, _, _, errorInfo = myAWS.GetRequestorEmailPhoneFromIdTokenClaims(myFireBase.FirestoreClientPtr, ctv.EMPTY); errorInfo.Error == nil {
// 				tPtr.Errorf("%v Failed: Was expecting an err of %v but got %v.", tFunctionName, errorInfo.Error.Error(), "nil")
// 			}
// 		},
// 	)
//
// 	StopTest(myFireBase)
// }

// Requires updated access token. You can use Cognito > User pools > App integration > App clients and analytics > {app name} > Hosted UI > View Hosted UI
// to login. This will output an access and id token for the user.
// func TestAWSHelper_GetRequestorFromAccessTokenClaims(tPtr *testing.T) {
//
// 	var (
// 		errorInfo         errs.ErrorInfo
// 		myAWS             AWSHelper
// 		myFireBase        coreHelpers.FirebaseFirestoreHelper
// 		function, _, _, _ = runtime.Caller(0)
// 		tFunctionName     = runtime.FuncForPC(function).Name()
// 	)
//
// 	myAWS, myFireBase = StartTest()
//
// 	tPtr.Run(
// 		tFunctionName, func(tPtr *testing.T) {
// 			//  Positive Test - Successful
// 			if _, errorInfo = myAWS.GetRequestorFromAccessTokenClaims(
// 				myFireBase.FirestoreClientPtr,
// 				string(testingAccessTokenValid),
// 			); errorInfo.Error != nil {
// 				tPtr.Errorf("%v Failed: Was expecting an err of %v but got %v.", tFunctionName, "nil", errorInfo.Error.Error())
// 			}
// 			if _, errorInfo = myAWS.GetRequestorFromAccessTokenClaims(myFireBase.FirestoreClientPtr, ctv.TEST_TOKEN_INVALID); errorInfo.Error == nil {
// 				tPtr.Errorf("%v Failed: Was expecting an err of %v but got %v.", tFunctionName, errorInfo.Error.Error(), "nil")
// 			}
// 			if _, errorInfo = myAWS.GetRequestorFromAccessTokenClaims(myFireBase.FirestoreClientPtr, ctv.EMPTY); errorInfo.Error == nil {
// 				tPtr.Errorf("%v Failed: Was expecting an err of %v but got %v.", tFunctionName, errorInfo.Error.Error(), "nil")
// 			}
// 		},
// 	)
//
// 	StopTest(myFireBase)
// }

func TestLoadAWSCustomerSettings(tPtr *testing.T) {

	type arguments struct {
		config      CognitoIdentityInfo
		environment string
	}

	var (
		errorInfo errs.ErrorInfo
		gotError  bool
	)

	tests := []struct {
		name      string
		arguments arguments
		wantError bool
	}{
		{
			name: ctv.TEST_POSITIVE_SUCCESS + "local config",
			arguments: arguments{
				config:      styConfigLocal,
				environment: ctv.ENVIRONMENT_LOCAL,
			},
			wantError: false,
		},
		{
			name: ctv.TEST_POSITIVE_SUCCESS + "development config",
			arguments: arguments{
				config:      styConfigDevelopment,
				environment: ctv.ENVIRONMENT_DEVELOPMENT,
			},
			wantError: false,
		},
		{
			name: ctv.TEST_POSITIVE_SUCCESS + "production config",
			arguments: arguments{
				config:      styConfigProduction,
				environment: ctv.ENVIRONMENT_PRODUCTION,
			},
			wantError: false,
		},
	}

	for _, ts := range tests {
		tPtr.Run(
			ts.name, func(t *testing.T) {
				if _, errorInfo = LoadAWSCustomerSettings(ts.arguments.environment); errorInfo.Error != nil {
					gotError = true
				} else {
					gotError = false
				}
				if gotError != ts.wantError {
					tPtr.Error(errorInfo.Error.Error())
				}
			},
		)
	}
}

// Requires a JWT. You can get a token two ways:
// 1) You can use Cognito > User pools > App integration > App clients and analytics > {app name} > Hosted UI > View
// Hosted UI to login. This will output an access and id token for the user.
// 2) Call the AWSServices Login function before each test needing a token
func TestParseAWSJWT(tPtr *testing.T) {

	type arguments struct {
		loginType          string
		password           *string
		shouldBeAuthorized bool
		username           string
	}

	var (
		environment = ctv.ENVIRONMENT_LOCAL
		errorInfo   errs.ErrorInfo
		gotError    bool
		idToken     string
		password    = "Aa1234567!"
		awsSettings AWSSettings
	)

	tests := []struct {
		name      string
		arguments arguments
		wantError bool
	}{
		{
			name: ctv.TEST_POSITIVE_SUCCESS + "login with username/password",
			arguments: arguments{
				loginType:          ctv.AUTH_USER_PASSWORD_AUTH,
				password:           &password,
				shouldBeAuthorized: true,
				username:           testUsername,
			},
			wantError: false,
		},
		{
			name: ctv.TEST_POSITIVE_SUCCESS + "login with SRP",
			arguments: arguments{
				loginType:          ctv.AUTH_USER_SRP,
				password:           &password,
				shouldBeAuthorized: true,
				username:           testUsername,
			},
			wantError: false,
		},
	}

	for _, ts := range tests {
		tPtr.Run(
			ts.name, func(t *testing.T) {
				awsSettings, errorInfo = LoadAWSCustomerSettings(environment)
				_, idToken, _, errorInfo = Login(
					ts.arguments.loginType,
					ts.arguments.username,
					ts.arguments.password,
					awsSettings.STYHCognitoIdentityInfo,
					awsSettings.BaseConfig,
				)
				if ParseAWSJWT(awsSettings, ctv.TOKEN_TYPE_ID, idToken); errorInfo.Error != nil {
					gotError = true
				} else {
					gotError = false
				}
				if gotError != ts.wantError {
					tPtr.Error(errorInfo.Error.Error())
				}
			},
		)
	}
}

// Requires updated access token. You can use Cognito > User pools > App integration > App clients and analytics > {app name} > Hosted UI > View Hosted UI
// to login. This will output an access and id token for the user.
// func TestAWSHelper_ParseJWT(tPtr *testing.T) {
//
// 	var (
// 		errorInfo         errs.ErrorInfo
// 		myAWS             AWSHelper
// 		myFireBase        coreHelpers.FirebaseFirestoreHelper
// 		function, _, _, _ = runtime.Caller(0)
// 		tFunctionName     = runtime.FuncForPC(function).Name()
// 	)
//
// 	myAWS, myFireBase = StartTest()
//
// 	tPtr.Run(
// 		tFunctionName, func(tPtr *testing.T) {
// 			if _, errorInfo = myAWS.ParseAWSJWT(string(testingAccessTokenValid)); errorInfo.Error != nil {
// 				tPtr.Errorf("%v Failed: Was expecting an err of %v but got %v.", tFunctionName, "nil", errorInfo.Error.Error())
// 			}
// 			if _, errorInfo = myAWS.ParseAWSJWT(ctv.EMPTY); errorInfo.Error == nil {
// 				tPtr.Errorf("%v Failed: Was expecting an err of %v but got %v.", tFunctionName, errorInfo.Error.Error(), "nil")
// 			}
// 		},
// 	)
//
// 	StopTest(myFireBase)
// }

// TestPullCognitoUserInfo - tests the PullCognitoUserInfo function by invoking it with different inputs.
//
//	Customer Messages: None
//	Errors: An error is raised if the username is empty, or if the AWS client creation fails.
//	Verifications: None
func TestPullCognitoUserInfo(tPtr *testing.T) {

	type arguments struct {
		userPoolId string
		username   string
	}

	var (
		awsSettings AWSSettings
		errorInfo   errs.ErrorInfo
		gotError    bool
	)

	tests := []struct {
		name      string
		arguments arguments
		wantError bool
	}{
		{
			name: ctv.TEST_POSITIVE_SUCCESS + "Pulled User Info with email",
			arguments: arguments{
				userPoolId: "us-west-2_dkEw5w5Cy",
				username:   "testuser@sty-holdings.com",
			},
			wantError: false,
		},
		{
			name: ctv.TEST_POSITIVE_SUCCESS + "Pulled User Info with username",
			arguments: arguments{
				userPoolId: "us-west-2_dkEw5w5Cy",
				username:   "ae163f5c-15f5-4496-8416-1703d45c5663",
			},
			wantError: false,
		},
		{
			name: ctv.TEST_NEGATIVE_SUCCESS + "UserPoolId empty",
			arguments: arguments{
				userPoolId: ctv.VAL_EMPTY,
				username:   "testuser@sty-holdings.com",
			},
			wantError: true,
		},
		{
			name: ctv.TEST_NEGATIVE_SUCCESS + "Username empty",
			arguments: arguments{
				userPoolId: "us-west-2_dkEw5w5Cy",
				username:   ctv.VAL_EMPTY,
			},
			wantError: true,
		},
	}

	for _, ts := range tests {
		tPtr.Run(
			ts.name, func(t *testing.T) {
				awsSettings.STYHCognitoIdentityInfo, awsSettings.BaseConfig, errorInfo = LoadServerAWSBaseConfig(
					"/Users/syacko/workspace/sty-holdings/GriesPikeThomp/servers/connect-server/config/local/AWS-account-info.json",
				)
				if _, errorInfo = PullCognitoUserInfo(awsSettings.BaseConfig, ts.arguments.username, ts.arguments.userPoolId); errorInfo.Error != nil {
					gotError = true
				} else {
					gotError = false
				}
				if gotError != ts.wantError {
					tPtr.Error(errorInfo.Error)
				}
			},
		)
	}
}

// Requires updated access token. You can use Cognito > User pools > App integration > App clients and analytics > {app name} > Hosted UI > View Hosted UI
// to login. This will output an access and id token for the user.
//
//	The actual reset will be bypassed because the resetByPass is set to true
// func TestAWSHelper_ResetUserPassword(tPtr *testing.T) {
//
// 	var (
// 		errorInfo         errs.ErrorInfo
// 		myAWS             AWSHelper
// 		myFireBase        coreHelpers.FirebaseFirestoreHelper
// 		resetByPass       = true
// 		function, _, _, _ = runtime.Caller(0)
// 		tFunctionName     = runtime.FuncForPC(function).Name()
// 	)
//
// 	myAWS, myFireBase = StartTest()
//
// 	tPtr.Run(
// 		tFunctionName, func(tPtr *testing.T) {
// 			if errorInfo = myAWS.ResetUserPassword(ctv.TEST_USERNAME_SAVUP_TEST_DO_NOT_DELETE, resetByPass); errorInfo.Error != nil {
// 				if errorInfo.Error.Error() == errs.ATTEMPTS_EXCEEDED {
// 					fmt.Println(errs.ATTEMPTS_EXCEEDED)
// 				} else {
// 					tPtr.Errorf("%v Failed: Was expecting an err of %v but got %v.", tFunctionName, "nil", errorInfo.Error.Error())
// 				}
// 			}
// 			if errorInfo = myAWS.ResetUserPassword(ctv.EMPTY, resetByPass); errorInfo.Error == nil {
// 				tPtr.Errorf("%v Failed: Was expecting an err of %v but got %v.", tFunctionName, errorInfo.Error.Error(), "nil")
// 			}
// 		},
// 	)
//
// 	StopTest(myFireBase)
// }

// Requires updated access token. You can use Cognito > User pools > App integration > App clients and analytics > {app name} > Hosted UI > View Hosted UI
// to login. This will output an access and id token for the user.
// func TestAWSHelper_UpdateAWSEmailVerifyFlag(tPtr *testing.T) {
// 	//
// 	// NOTE: The Id and Access token must match the username in ctv.TEST_USERNAME_SAVUP_TEST_DO_NOT_DELETE
// 	//
//
// 	var (
// 		errorInfo         errs.ErrorInfo
// 		myAWS             AWSHelper
// 		myFireBase        coreHelpers.FirebaseFirestoreHelper
// 		function, _, _, _ = runtime.Caller(0)
// 		tFunctionName     = runtime.FuncForPC(function).Name()
// 		tUsername         = ctv.TEST_USERNAME_SAVUP_TEST_DO_NOT_DELETE
// 	)
//
// 	myAWS, myFireBase = StartTest()
//
// 	tPtr.Run(
// 		tFunctionName, func(tPtr *testing.T) {
// 			if errorInfo = myAWS.UpdateAWSEmailVerifyFlag(tUsername); errorInfo.Error != nil {
// 				tPtr.Errorf("%v Failed: Was expecting an err of %v but got %v.", tFunctionName, "nil", errorInfo.Error.Error())
// 			}
// 			if errorInfo = myAWS.UpdateAWSEmailVerifyFlag(ctv.EMPTY); errorInfo.Error == nil {
// 				tPtr.Errorf("%v Failed: Was expecting an err of %v but got %v.", tFunctionName, errorInfo.Error.Error(), "nil")
// 			}
// 		},
// 	)
//
// 	StopTest(myFireBase)
// }

// Requires updated access token. You can use Cognito > User pools > App integration > App clients and analytics > {app name} > Hosted UI > View Hosted UI
// to login. This will output an access and id token for the user.
// func TestAWSHelper_ValidAWSJWT(tPtr *testing.T) {
//
// 	type arguments struct {
// 		tokenType string
// 		token     string
// 	}
//
// 	var (
// 		errorInfo         errs.ErrorInfo
// 		myAWS             AWSHelper
// 		myFireBase        coreHelpers.FirebaseFirestoreHelper
// 		function, _, _, _ = runtime.Caller(0)
// 		tFunctionName     = runtime.FuncForPC(function).Name()
// 		tToken            string
// 		tValid            bool
// 	)
//
// 	tests := []struct {
// 		name          string
// 		arguments     arguments
// 		shouldBeValid bool
// 	}{
// 		{
// 			name: "Positive Case: Access Successful!",
// 			arguments: arguments{
// 				tokenType: ctv.TOKEN_TYPE_ACCESS,
// 				token:     "valid",
// 			},
// 			shouldBeValid: true,
// 		},
// 		{
// 			name: "Positive Case: Id Successful!",
// 			arguments: arguments{
// 				tokenType: ctv.TOKEN_TYPE_ID,
// 				token:     "valid",
// 			},
// 			shouldBeValid: true,
// 		},
// 		{
// 			name: "Negative Case: Access invalid!",
// 			arguments: arguments{
// 				tokenType: ctv.TOKEN_TYPE_ACCESS,
// 				token:     "invalid",
// 			},
// 			shouldBeValid: false,
// 		},
// 		{
// 			name: "Negative Case: Id invalid!",
// 			arguments: arguments{
// 				tokenType: ctv.TOKEN_TYPE_ID,
// 				token:     "invalid",
// 			},
// 			shouldBeValid: false,
// 		},
// 		{
// 			name: "Negative Case: Access missing!",
// 			arguments: arguments{
// 				tokenType: ctv.TOKEN_TYPE_ACCESS,
// 				token:     "missing",
// 			},
// 			shouldBeValid: false,
// 		},
// 		{
// 			name: "Negative Case: Id missing!",
// 			arguments: arguments{
// 				tokenType: ctv.TOKEN_TYPE_ID,
// 				token:     "missing",
// 			},
// 			shouldBeValid: false,
// 		},
// 	}
//
// 	myAWS, myFireBase = StartTest()
//
// 	for _, ts := range tests {
// 		tPtr.Run(
// 			ts.name, func(t *testing.T) {
// 				tToken = getToken(ts.arguments.tokenType, ts.arguments.token)
// 				if tValid, errorInfo = myAWS.ValidAWSJWT(myFireBase.FirestoreClientPtr, ts.arguments.tokenType, tToken); tValid != ts.shouldBeValid {
// 					tPtr.Error(tFunctionName, ts.name, errorInfo, fmt.Sprintf("Expected the token to be %v and it was %v", ts.shouldBeValid, tValid))
// 				}
// 			},
// 		)
// 	}
//
// 	StopTest(myFireBase)
// }

// Part of run_AWS_No_Token_Test list
// func TestGetPublicKeySet(tPtr *testing.T) {
//
// 	var (
// 		errorInfo         errs.ErrorInfo
// 		function, _, _, _ = runtime.Caller(0)
// 		tFunctionName     = runtime.FuncForPC(function).Name()
// 		tKeySetURL        = fmt.Sprintf(ctv.TEST_AWS_KEYSET_URL, ctv.TEST_USER_POOL_ID)
// 	)
//
// 	tPtr.Run(
// 		tFunctionName, func(tPtr *testing.T) {
// 			if _, errorInfo = getPublicKeySet(tKeySetURL); errorInfo.Error != nil {
// 				tPtr.Errorf("%v Failed: Was expecting an err of %v but got %v.", tFunctionName, "nil", errorInfo.Error.Error())
// 			}
// 			if _, errorInfo = getPublicKeySet(ctv.EMPTY); errorInfo.Error == nil {
// 				tPtr.Errorf("%v Failed: Was expecting an err of %v but got %v.", tFunctionName, errorInfo.Error.Error(), "nil")
// 			}
// 			if _, errorInfo = getPublicKeySet(ctv.TEST_URL_INVALID); errorInfo.Error == nil {
// 				tPtr.Errorf("%v Failed: Was expecting an err of %v but got %v.", tFunctionName, `errorInfo.Error.Error()`, "nil")
// 			}
// 		},
// 	)
// }

// Requires updated access token. You can use Cognito > User pools > App integration > App clients and analytics > {app name} > Hosted UI > View Hosted UI
// to login. This will output an access and id token for the user.
// func TestValidAWSClaims(tPtr *testing.T) {
//
// 	type arguments struct {
// 		subject       string
// 		email         string
// 		username      string
// 		emailVerified bool // emailVerified is only checked for ctv.TOKEN_TYPE_ID
// 		tokenUse      string
// 	}
//
// 	var (
// 		errorInfo         errs.ErrorInfo
// 		myFireBase        coreHelpers.FirebaseFirestoreHelper
// 		function, _, _, _ = runtime.Caller(0)
// 		tFunctionName     = runtime.FuncForPC(function).Name()
// 		tValid            bool
// 	)
//
// 	tests := []struct {
// 		name          string
// 		arguments     arguments
// 		shouldBeValid bool
// 	}{
// 		{
// 			name: "Positive Case: Successful Id Token!",
// 			arguments: arguments{
// 				subject:       ctv.TEST_USERNAME_SAVUP_REQUESTOR_ID,
// 				email:         ctv.TEST_USER_EMAIL,
// 				username:      ctv.TEST_USERNAME_SAVUP_TEST_DO_NOT_DELETE,
// 				emailVerified: true,
// 				tokenUse:      ctv.TOKEN_TYPE_ID,
// 			},
// 			shouldBeValid: true,
// 		},
// 		{
// 			name: "Positive Case: Successful Access Token!",
// 			arguments: arguments{
// 				subject:       ctv.TEST_USERNAME_SAVUP_REQUESTOR_ID,
// 				email:         ctv.TEST_USER_EMAIL,
// 				username:      ctv.TEST_USERNAME_SAVUP_TEST_DO_NOT_DELETE,
// 				emailVerified: true,
// 				tokenUse:      ctv.TOKEN_TYPE_ACCESS,
// 			},
// 			shouldBeValid: true,
// 		},
// 		{
// 			name: "Negative Case: Email not verified!",
// 			arguments: arguments{
// 				subject:       ctv.TEST_USERNAME_SAVUP_REQUESTOR_ID,
// 				email:         ctv.TEST_USER_EMAIL,
// 				username:      ctv.TEST_USERNAME_SAVUP_TEST_DO_NOT_DELETE,
// 				emailVerified: false,
// 				tokenUse:      ctv.TOKEN_TYPE_ID,
// 			},
// 			shouldBeValid: false,
// 		},
// 		{
// 			name: "Negative Case: Token type missing!",
// 			arguments: arguments{
// 				subject:       ctv.TEST_USERNAME_SAVUP_REQUESTOR_ID,
// 				email:         ctv.TEST_USER_EMAIL,
// 				username:      ctv.TEST_USERNAME_SAVUP_TEST_DO_NOT_DELETE,
// 				emailVerified: true,
// 				tokenUse:      ctv.EMPTY,
// 			},
// 			shouldBeValid: false,
// 		},
// 		{
// 			name: "Negative Case: subject is missing!",
// 			arguments: arguments{
// 				subject:       ctv.EMPTY,
// 				email:         ctv.TEST_USER_EMAIL,
// 				username:      ctv.TEST_USERNAME_SAVUP_TEST_DO_NOT_DELETE,
// 				emailVerified: true,
// 				tokenUse:      ctv.EMPTY,
// 			},
// 			shouldBeValid: false,
// 		},
// 		{
// 			name: "Negative Case: email is missing!",
// 			arguments: arguments{
// 				subject:       ctv.TEST_USERNAME_SAVUP_REQUESTOR_ID,
// 				email:         ctv.EMPTY,
// 				username:      ctv.TEST_USERNAME_SAVUP_TEST_DO_NOT_DELETE,
// 				emailVerified: true,
// 				tokenUse:      ctv.EMPTY,
// 			},
// 			shouldBeValid: false,
// 		},
// 		{
// 			name: "Negative Case: username is missing!",
// 			arguments: arguments{
// 				subject:       ctv.TEST_USERNAME_SAVUP_REQUESTOR_ID,
// 				email:         ctv.TEST_USER_EMAIL,
// 				username:      ctv.EMPTY,
// 				emailVerified: true,
// 				tokenUse:      ctv.EMPTY,
// 			},
// 			shouldBeValid: false,
// 		},
// 	}
//
// 	_, myFireBase = StartTest()
//
// 	for _, ts := range tests {
// 		tPtr.Run(
// 			ts.name, func(t *testing.T) {
// 				if tValid = areAWSClaimsValid(
// 					myFireBase.FirestoreClientPtr,
// 					ts.arguments.subject,
// 					ts.arguments.email,
// 					ts.arguments.username,
// 					ts.arguments.tokenUse,
// 					ts.arguments.emailVerified,
// 				); tValid != ts.shouldBeValid {
// 					tPtr.Error(tFunctionName, ts.name, errorInfo, fmt.Sprintf("Expected the token to be %v and it was %v", ts.shouldBeValid, tValid))
// 				}
// 			},
// 		)
// 	}
//
// 	StopTest(myFireBase)
// }
